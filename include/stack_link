/*! ************************************************************************
 *
 * Copyright (C) 2020 netforklabs All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *! ************************************************************************/

/*! ===> Creates on 2021/8/28. <=== */

/*!
 * @author LAB
 */

#ifndef FOXLIBC_MEM_STACK_H
#define FOXLIBC_MEM_STACK_H

#include <foxlibc>
#include <limits.h>

#define STACK_LINK_TYPE int

/** 栈节点 */
typedef struct _node_link{
    STACK_LINK_TYPE val;
    struct _node_link *next;
}Node_link;

/** 栈的链表实现 */
typedef struct _stack_link{
	size_t size;
	Node_link *top;
}Stack_head,*Stack_link;

/** 打印栈数据 */
__foxext__ void print_stack_link(Stack_link stack);

/** 初始化栈  */
__foxext__ void init_stack_link(Stack_link *stack);

/** 判断栈是否为空  */
__foxext__ bool isEmpty_stack_link(Stack_link stack);

/** 清空栈  */
__foxext__ bool makeEmpty_stack_link(Stack_link stack);

/** 入栈,前插  */
__foxext__ bool push_stack_link(Stack_link stack,STACK_LINK_TYPE val);

/** 出栈  */
__foxext__ STACK_LINK_TYPE pop_stack_link(Stack_link stack);

/** 获取栈顶元素  */
__foxext__ STACK_LINK_TYPE top_stack_link(Stack_link stack);

#endif /* FOXLIBC_MEM_STACK_H */
